from abc import ABC, abstractmethod
import abc


class Clothes(ABC):
    @abstractmethod
    def __init__(self):
        pass

    @property# –ø–∞–π—á–∞—Ä–º –ø–∏—à–µ—Ç —á—Ç–æ abstractproperty –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    @abstractmethod
    def size(self):
        pass

    @abstractmethod
    def __add__(self, other):
        pass

class Costume(Clothes):
    def __init__(self, h):
        self.h = h

    @property
    def size(self):
        return 2 * self.h + 0.3

    def __add__(self, other):
        return self.size + other.size




class Coat(Clothes):
    def __init__(self, v):  # —Ç–æ–ª—å–∫–æ —è —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª –∫–∞–∫–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞ v –∏–º–µ–ª–∏ –≤–≤–∏–¥—Éü§î
        self.v = v

    @property
    def size(self):
        return self.v / 6.5 + 0.5 #–ö–∞–∫–∏–µ —Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –Ω–µ—Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–∞—é—Ç

    def __add__(self, other):
        return self.size + other.size


if __name__ == '__main__':
    costume = Costume(174)
    print(f'–†–∞—Å—Ö–æ–¥ —Ç–∫–∞–Ω–∏ –¥–ª—è –∫–æ—Å—Ç—é–º–∞: {costume.size}')

    coat = Coat(105)
    print(f'–†–∞—Å—Ö–æ–¥ —Ç–∫–∞–Ω–∏ –¥–ª—è –ø–∞–ª—å—Ç–æ: {coat.size}')

    print(f'–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {coat + costume}')
